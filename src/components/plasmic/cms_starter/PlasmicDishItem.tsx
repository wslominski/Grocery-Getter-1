// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pA9FYz7hbXyY49Nyz79kUT
// Component: eIigLi1lRM

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: P4tQYTZpkGG2r/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_cms_starter.module.css"; // plasmic-import: pA9FYz7hbXyY49Nyz79kUT/projectcss
import sty from "./PlasmicDishItem.module.css"; // plasmic-import: eIigLi1lRM/css

export type PlasmicDishItem__VariantMembers = {};
export type PlasmicDishItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicDishItem__VariantsArgs;
export const PlasmicDishItem__VariantProps = new Array<VariantPropType>();

export type PlasmicDishItem__ArgsType = {};
type ArgPropType = keyof PlasmicDishItem__ArgsType;
export const PlasmicDishItem__ArgProps = new Array<ArgPropType>();

export type PlasmicDishItem__OverridesType = {
  root?: p.Flex<"div">;
  rectangle4?: p.Flex<"div">;
  heartEmoji1?: p.Flex<"div">;
};

export interface DefaultDishItemProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicDishItem__RenderFunc(props: {
  variants: PlasmicDishItem__VariantsArgs;
  args: PlasmicDishItem__ArgsType;
  overrides: PlasmicDishItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const new$Queries = {
    componentData: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "43RJ3EyqL88b5Y2fMikML2",
            opId: "25eb70e2-93c9-49c6-836f-649f115bf9e2",
            userArgs: {},
            cacheKey: "plasmic.$.KK_qy4fh4.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"rectangle4"}
        data-plasmic-override={overrides.rectangle4}
        className={classNames(projectcss.all, sty.rectangle4)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__cojUo)}>
          <div className={classNames(projectcss.all, sty.freeBox__lWvvv)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ugfck
              )}
            >
              {"cost:"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zFduW
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $queries.componentData.data[1].cost;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "cost:";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__eNxqo)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yNNbx
              )}
            >
              {"ingredients:"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6Hk8P
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $queries.componentData.data[1].ingredients;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "ingredients:";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"heartEmoji1"}
          data-plasmic-override={overrides.heartEmoji1}
          className={classNames(projectcss.all, sty.heartEmoji1)}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ewer9
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $queries.componentData.data[1].dish_name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Pizza";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "rectangle4", "heartEmoji1"],
  rectangle4: ["rectangle4", "heartEmoji1"],
  heartEmoji1: ["heartEmoji1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  rectangle4: "div";
  heartEmoji1: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDishItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDishItem__VariantsArgs;
    args?: PlasmicDishItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDishItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDishItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDishItem__ArgProps,
          internalVariantPropNames: PlasmicDishItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDishItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDishItem";
  } else {
    func.displayName = `PlasmicDishItem.${nodeName}`;
  }
  return func;
}

export const PlasmicDishItem = Object.assign(
  // Top-level PlasmicDishItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    rectangle4: makeNodeComponent("rectangle4"),
    heartEmoji1: makeNodeComponent("heartEmoji1"),

    // Metadata about props expected for PlasmicDishItem
    internalVariantProps: PlasmicDishItem__VariantProps,
    internalArgProps: PlasmicDishItem__ArgProps
  }
);

export default PlasmicDishItem;
/* prettier-ignore-end */
