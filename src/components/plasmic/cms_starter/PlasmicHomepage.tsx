// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pA9FYz7hbXyY49Nyz79kUT
// Component: 9eJIsFeJpf3V

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: P4tQYTZpkGG2r/codeComponent

import { useScreenVariants as useScreenVariantsulR2SZ6VQUzQ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ulR2S-Z6vQUzQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_cms_starter.module.css"; // plasmic-import: pA9FYz7hbXyY49Nyz79kUT/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 9eJIsFeJpf3V/css

import Vector1Icon from "./icons/PlasmicIcon__Vector1"; // plasmic-import: EtucHsnLer/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  macBookPro141?: p.Flex<"div">;
  rectangle1?: p.Flex<"div">;
  rectangle3?: p.Flex<"div">;
  rectangle2?: p.Flex<"div">;
  group1?: p.Flex<"div">;
  group2?: p.Flex<"div">;
  rectangle4?: p.Flex<"div">;
  heartEmoji1?: p.Flex<"div">;
};

export interface DefaultHomepageProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const new$Queries = {
    query2: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "43RJ3EyqL88b5Y2fMikML2",
            opId: "25eb70e2-93c9-49c6-836f-649f115bf9e2",
            userArgs: {},
            cacheKey: "plasmic.$.xz4qclDCS.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsulR2SZ6VQUzQ()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"macBookPro141"}
              data-plasmic-override={overrides.macBookPro141}
              className={classNames(projectcss.all, sty.macBookPro141)}
            >
              <div
                data-plasmic-name={"rectangle1"}
                data-plasmic-override={overrides.rectangle1}
                className={classNames(projectcss.all, sty.rectangle1)}
              />

              <div
                data-plasmic-name={"rectangle3"}
                data-plasmic-override={overrides.rectangle3}
                className={classNames(projectcss.all, sty.rectangle3)}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  data-plasmic-name={"rectangle2"}
                  data-plasmic-override={overrides.rectangle2}
                  className={classNames(projectcss.all, sty.rectangle2)}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mNwU2
                )}
              >
                {"wslominski"}
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9O293
                  )}
                >
                  {"Vote on the dishes you want this week!"}
                </div>
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zPrW
                )}
              >
                {"pizza"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__c5Thc
                )}
              >
                {"pasta"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__i1R1R
                )}
              >
                {"chicken noodle soup"}
              </div>
              <div
                data-plasmic-name={"group1"}
                data-plasmic-override={overrides.group1}
                className={classNames(projectcss.all, sty.group1)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__izuW3
                  )}
                >
                  {"Your Picks"}
                </div>
                <Vector1Icon
                  className={classNames(projectcss.all, sty.svg__jwKAg)}
                  role={"img"}
                />
              </div>
              <div
                data-plasmic-name={"group2"}
                data-plasmic-override={overrides.group2}
                className={classNames(projectcss.all, sty.group2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dvdDv
                  )}
                >
                  {"Pick Count"}
                </div>
                <Vector1Icon
                  className={classNames(projectcss.all, sty.svg__rq3Bj)}
                  role={"img"}
                />
              </div>
              <div
                data-plasmic-name={"rectangle4"}
                data-plasmic-override={overrides.rectangle4}
                className={classNames(projectcss.all, sty.rectangle4)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__jht7R)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rHuqv)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qBbaq
                      )}
                    >
                      {"cost:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rqac
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.query2.data[0].cost;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "cost:";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__s56Fa)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1OdO4
                      )}
                    >
                      {"ingredients:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2WXyr
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.query2.data[0].ingredients;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "ingredients:";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dCiOg
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query2.data[0].dish_name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Pizza";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"heartEmoji1"}
                data-plasmic-override={overrides.heartEmoji1}
                className={classNames(projectcss.all, sty.heartEmoji1)}
              />
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "macBookPro141",
    "rectangle1",
    "rectangle3",
    "rectangle2",
    "group1",
    "group2",
    "rectangle4",
    "heartEmoji1"
  ],
  macBookPro141: [
    "macBookPro141",
    "rectangle1",
    "rectangle3",
    "rectangle2",
    "group1",
    "group2",
    "rectangle4",
    "heartEmoji1"
  ],
  rectangle1: ["rectangle1"],
  rectangle3: ["rectangle3"],
  rectangle2: ["rectangle2"],
  group1: ["group1"],
  group2: ["group2"],
  rectangle4: ["rectangle4"],
  heartEmoji1: ["heartEmoji1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  macBookPro141: "div";
  rectangle1: "div";
  rectangle3: "div";
  rectangle2: "div";
  group1: "div";
  group2: "div";
  rectangle4: "div";
  heartEmoji1: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    macBookPro141: makeNodeComponent("macBookPro141"),
    rectangle1: makeNodeComponent("rectangle1"),
    rectangle3: makeNodeComponent("rectangle3"),
    rectangle2: makeNodeComponent("rectangle2"),
    group1: makeNodeComponent("group1"),
    group2: makeNodeComponent("group2"),
    rectangle4: makeNodeComponent("rectangle4"),
    heartEmoji1: makeNodeComponent("heartEmoji1"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
